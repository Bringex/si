#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <locale.h>
#include "string.h"

typedef struct{
    unsigned char marker[3];
    unsigned char version[1];
    unsigned char sub_version[1];
    unsigned char flags[1];
    unsigned char length[4];
} header;

typedef struct{
    unsigned char Frame_ID[4];
    unsigned char size[4];
    unsigned char flags[2];
} frame;


//convert BE to Num
int convert_length(unsigned char length[]){
    //printf("\nlength: %d %d %d %d", length[0], length[1], length[2], length[3]);

    typedef union{
        int val;
        unsigned char byte[4];
    } split;

    split number;
    number.byte[0] = length[3] & 0x7F;
    number.byte[1] = length[2];
    number.byte[2] = length[1];
    number.byte[3] = length[0];

    return number.val;
}

//convert Num to BE
unsigned char *value_to_array(int value){
    typedef union{
        int val;
        unsigned char byte[4];
    } split;

    split number;
    number.val = value;

    unsigned char* length = malloc(4 * sizeof(char));
    length[0] = number.byte[3];
    length[1] = number.byte[2];
    length[2] = number.byte[1];
    length[3] = number.byte[0];
    return length;
}



void show (char* file_name){


    FILE* file = fopen(file_name, "rb");
    header head;
    if ((file) != NULL)
    {

        fseek(file, 0, SEEK_SET);
        //read head TAG
        fread(&head, 1, 10, file);
        //get size of all meta
        int size_tag = convert_length(head.length);
        //printf("\n%d", size_tag);

        while (ftell(file) < size_tag){

            frame framer;
            //start reading frame head
            fread(&framer, 1, 10, file);
            int size = convert_length(framer.size);
            unsigned char* mediaFrame = malloc(size * sizeof( char));
            fread(mediaFrame, 1, size, file);
            for (unsigned int i = 0; i < size; i++)
                printf("%c", mediaFrame[i]);
            printf(" ");

        }

    }
    else
        printf("error");



}
void get (char* file_name, char* TAG){

    FILE* file = fopen(file_name, "rb");
    header head;

    if ((file) != NULL)
    {

        fseek(file, 0, SEEK_SET);
        fread(&head, 1, 10, file);
        int size_tag = convert_length(head.length) + 10;

        while (ftell(file) < size_tag){

            frame framer;
            fread(&framer, 1, 10, file);
            int size = convert_length(framer.size);
            unsigned char* mediaFrame = malloc(size * sizeof( char));
            fread(mediaFrame, 1, size, file);

            if (framer.Frame_ID[0] == TAG[0] && framer.Frame_ID[1] == TAG[1] &&
                framer.Frame_ID[2] == TAG[2] && framer.Frame_ID[3] == TAG[3]
                ){
                printf("\n");
                printf("%c%c%c%c", framer.Frame_ID[0], framer.Frame_ID[1], framer.Frame_ID[2], framer.Frame_ID[3]);
                printf("\n");
                for (unsigned int i = 0; i < size; i++)
                    printf("%c", mediaFrame[i]);
                break;
            }
        }

    }
    else
        printf("error");

    fclose(file);

}
void set (char* file_name, char* TAG, char* value){

    FILE* file2;
    FILE* file = fopen(file_name, "r+b");
    header head;
    int sizeofFile = 0;
    if ((file) != NULL)
    {

        fseek(file, 0, SEEK_END);
        sizeofFile = ftell(file);
        fseek(file, 0, SEEK_SET);
        fread(&head, 1, 10, file);
        int size_tag = convert_length(head.length);

        while (ftell(file) < size_tag){

            frame framer;
            fread(&framer, 1, 10, file);
            int size = convert_length(framer.size);
            unsigned char* mediaFrame = malloc(size * sizeof( char));
            fread(mediaFrame, 1, size, file);
            if (size == 0)
                continue;
            if (framer.Frame_ID[0] == TAG[0] && framer.Frame_ID[1] == TAG[1] &&
                framer.Frame_ID[2] == TAG[2] && framer.Frame_ID[3] == TAG[3]
                ){
                //found current tag and let's change it

                unsigned int index = ftell(file) - 10;

                //length without current frame
                unsigned int nendLength = sizeofFile - ftell(file);

                unsigned char* partTwo = malloc((nendLength)* sizeof(char));
                fread(partTwo, 1, nendLength, file);

                //partOne it's: [10, index - size]
                unsigned char* partOne = malloc((index - size - 10)* sizeof(char));

                //we need to change tag size
                int newLengthTag = size_tag - size + strlen(value) + 1;

                file2 = fopen("copy.mp3", "w+b");
                fclose(file2);
                file2 = fopen("copy.mp3", "r+b");

                fseek(file, 0, SEEK_SET);
                fseek(file2, 0, SEEK_SET);
                //length of str and convert to BE
                unsigned char *lengthfile = value_to_array(strlen(value) + 1);

                //read partOne
                fseek(file, 10, 0);
                fread(partOne, 1, index - size - 10, file); //-10 it's header

                //new size of tag convert to BE
                unsigned char *lengthfile2 = value_to_array(newLengthTag);

                head.length[0] = lengthfile2[0];
                head.length[1] = lengthfile2[1];
                head.length[2] = lengthfile2[2];
                head.length[3] = lengthfile2[3];

                framer.size[0] = lengthfile[0];
                framer.size[1] = lengthfile[1];
                framer.size[2] = lengthfile[2];
                framer.size[3] = lengthfile[3];

                //start write to new cope.mp3
                fwrite(&head, 1, sizeof(head), file2);
                fwrite(partOne, 1, index - size - 10, file2);

                fwrite(&framer, 1, sizeof(framer), file2);
                char cur = 0;
                fwrite(&cur, 1, 1, file2);
                fwrite(value, 1, strlen(value), file2);
                fwrite(partTwo, 1, nendLength, file2);

                free(partTwo);
                free(partOne);

                fseek(file2, 0, SEEK_END);
                int sizeFile2 = ftell(file2);
                fseek(file, 0, SEEK_SET);
                fseek(file2, 0, SEEK_SET);


                fclose(file);
                file = fopen(file_name, "w");
                fclose(file);
                file = fopen(file_name, "r+b");

                int i = 0;
                while(i++ < sizeFile2)
                    putc(getc(file2), file);

                printf("\nChanged %s to %s", TAG, value);
                break;
            }

        }

    }
    else
        printf("error");
}
void print_header(header head){
    printf("\nmarker: %d %d %d", head.marker[0], head.marker[1], head.marker[2]);
    printf("\nversion: %d", head.version[0]);
    printf("\nsub_version: %d", head.sub_version[0]);
    printf("\nflags: %d", head.sub_version[0]);
    //convert_length(head.length);
}
int main(int argc, char* argv[])
{
    char* file = strchr(argv[1], '=') + 1;

    if (argv[2][3] == 'h')
        show(file);
    else if (argv[2][2] == 'g')
    {
        char* tag = strchr(argv[2], '=') + 1;
        get(file, tag);
    }
    else if (argv[2][2] == 's')
    {
        char* tag = strchr(argv[2], '=') + 1;
        char* value = strchr(argv[3], '=') + 1;
        printf("\n%s", tag);
        printf("\n%s", value);

        set(file, tag, value);
    }

    //la13.exe --filepath=full4.mp3 --show
    //la13.exe --filepath=full4.mp3 --get=TIT2
    //la13.exe --filepath=full4.mp3 --set=TIT2 --value=opalol
    //get(buffer, "TPE1");
    //get(buffer, "TPE2");
    //1. TPE1 2. TCON 3. TIT2  4. TRCK   5. TDRC
    //set(buffer, "TIT2", "TIT2");
    //set(buffer, "TPE1", "TPE1");
    //set(buffer, "TALB", "TALB");
    return 0;
}
