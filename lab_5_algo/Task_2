#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>
   
   
using namespace std;
 
int noExist = 2000000000;
 
bool exist(int num)
{
    if (num != -1)
        return true;
    else
        return false;
}
struct Node{
    int key;
    int left;
    int right; 
    int parrent;
};
 
//path = 0 => левая вершина
//path = 1 => права вершина
vector<Node> mainVector;
bool check(int index, int min, int max, bool checkAnswer, int lastKey){
    if (!(mainVector[index].key > min && mainVector[index].key < max) || mainVector[index].key == lastKey)
        return false;
     
    if (exist(mainVector[index].left))
    {
        if (max == noExist)
            checkAnswer = check(mainVector[index].left, min, mainVector[index].key, checkAnswer, mainVector[index].key);
        else
            checkAnswer = check(mainVector[index].left, min, max, checkAnswer, mainVector[index].key);
         
         
    }
    if (exist(mainVector[index].right))
    {
        if (min == -noExist)
            checkAnswer = check(mainVector[index].right, mainVector[index].key, max, checkAnswer, mainVector[index].key);
        else
        checkAnswer = check(mainVector[index].right, min, max, checkAnswer, mainVector[index].key);
 
    }
 
 
    return checkAnswer;
 
}  
 
void anotherCheck(vector<Node> mainVector){
 
    Node currentNode = mainVector[0];
    //max - n
    while (currentNode.parrent != -1 )
        currentNode = mainVector[currentNode.parrent];
    bool checkAnswer = true;
    if (exist(currentNode.left))
        checkAnswer = check(currentNode.left, -noExist, currentNode.key, true, currentNode.key);
    if (exist(currentNode.right))
        checkAnswer = check(currentNode.right, currentNode.key, noExist, true, currentNode.key);
     
    if (checkAnswer)
        cout << "YES";
    else
        cout << "NO";
 
    //cout << h;
 
}
 
int main() {
   
    ios_base::sync_with_stdio(false);
     
    freopen("check.in", "r", stdin);
    freopen("check.out", "w", stdout);
    int n, k, l, r;
    cin >> n;
    mainVector.assign(n, {0, 0, 0, -1});
 
    for (int i = 0; i < n; i++)
    {
        cin >> k >> l >> r;
        mainVector[i].key = k;
        mainVector[i].left = l - 1;
        mainVector[i].right = r - 1;  
 
        if (r - 1 >= 0)
            mainVector[r - 1].parrent = i;
        if (l - 1 >= 0)
            mainVector[l - 1].parrent = i;
    }
    if (n == 0)
        cout << "YES";
    else
        anotherCheck(mainVector);
     
    return 0;
}
