#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>
#include <cstdlib>
   
   
using namespace std;
 
struct Node{
    int key;
    Node* left;
    Node* right;
    Node* parrent;
};
 
Node* root;
Node * insert(Node *node, int key) 
{   
    Node* NodeNew = new Node;
    NodeNew->key = key;
    NodeNew->left = NULL;
    NodeNew->right = NULL;
 
    Node* x = node;
    Node* y = NULL;
    while (x != NULL) {
        y = x;
        if (key < x->key)
            x = x->left;
        else if (key > x->key)
            x = x->right;
        else
            return root;
    }
 
    if (y == NULL){
        NodeNew->parrent = NULL;
        y = NodeNew;
        root = NodeNew;
    }
    else if (key < y->key){
        NodeNew->parrent = y;
        y->left = NodeNew;
    }
    else{
        NodeNew->parrent = y;
        y->right = NodeNew;
    } 
    return root;    
 
}
 
Node * exist(Node *node, int key){
 
    while (node)
    {   
        if (key == node->key)
                return node;
        else if (key < node->key) 
            node = node->left;
        else
            node = node->right;
    }
    return NULL;    
}
Node* maxNode(Node *node) {
    while (node->right) {
        node = root->right;
    }
    return node;
}
Node* minNode(Node *node) {
    while (node->left) {
        node = node->left;
    }
    return node;
}
 
void next(Node *node, int key){
    int find = -2000000000;
     
    while (node)
    {
        if (key < node-> key)
            {
                find = node->key;
                node = node ->left;
            }
        else
            node = node->right;
    }
    if (find != -2000000000)
        cout << find << "\n";
    else
        cout << "none\n";
 
}
void prev(Node *node, int key){
    int find = -2000000000;
     
     
    while (node){  
        if (key <= node->key)
            node = node->left;
        else if (key > node->key) 
            {
                find = node->key;
                node = node->right;
            }
    }
    if (find != -2000000000)
        cout << find << "\n";
    else
        cout << "none\n";
}
 
Node * deleteV(Node *deleting){
 
     
    if (!deleting)
        return deleting;
     
 
    //root
    if (deleting->parrent == NULL){
         
        if (deleting->left && deleting->right){
            //обе есть
            Node* min = minNode(deleting->right);
            deleting->key = min->key;
            deleteV(min);
        }
        else if (root->left){
            root->left->parrent = NULL;
            root = root->left;
        }
             
        else if (deleting->right){
            root->right->parrent = NULL;
            root = root->right;
        }
        else
            root = NULL;
        return NULL;
    } 
    if (deleting->left && deleting->right){
        Node* min = minNode(deleting->right);
        deleting->key = min->key;
        deleteV(min);
    }
    else if (deleting->left)
        if (deleting == deleting->parrent->left)
        {
            deleting->left->parrent = deleting->parrent;
            deleting->parrent->left = deleting->left;
        }
        else
        {
            deleting->left->parrent = deleting->parrent;
            deleting->parrent->right = deleting->left;
        }
    else if (deleting->right)
        if (deleting == deleting->parrent->left)
        {
            //отец ребенка теперь другой
            deleting->right->parrent = deleting->parrent;
            //у отца узла теперь ребенок узла
            deleting->parrent->left = deleting->right;
 
        }
        else
        {
            deleting->right->parrent = deleting->parrent;
            deleting->parrent->right = deleting->right;
        }
    else
        if (deleting == deleting->parrent->left)
            deleting->parrent->left = NULL;
        else
            deleting->parrent->right = NULL;
    return NULL;
}
 
int main() {
   
    ios_base::sync_with_stdio(false);
     
    freopen("bstsimple.in", "r", stdin);
    freopen("bstsimple.out", "w", stdout);
    string str = "";
    int indexOne = 0;
    string devider = " ";
    root = NULL;
 
    while(getline(cin, str)){
        if (str[0] == 'i'){
            indexOne = str.find(devider);
            string first = str.substr(0, indexOne);
            root = insert(root, stoi(str.substr(indexOne + 1, str.length() - 1)));
        }
        else if (str[0] == 'd'){
            indexOne = str.find(devider);
            string first = str.substr(0, indexOne);
            deleteV(exist(root, stoi(str.substr(indexOne + 1, str.length() - 1))));
        }
        else if(str[0] == 'e'){
            indexOne = str.find(devider);
            string first = str.substr(0, indexOne);
            Node *noder =  exist(root, stoi(str.substr(indexOne + 1, str.length() - 1)));
            if (noder)
                cout << "true\n";
            else
                cout << "false\n";
        }
        else if( str[0] == 'n'){
            indexOne = str.find(devider);
            string first = str.substr(0, indexOne);
            next(root, stoi(str.substr(indexOne + 1, str.length() - 1)));
             
        }
        else if( str[0] == 'p'){
            indexOne = str.find(devider);
            string first = str.substr(0, indexOne);
            prev(root, stoi(str.substr(indexOne + 1, str.length() - 1)));
             
        }
          
    }
     
    return 0;
}
